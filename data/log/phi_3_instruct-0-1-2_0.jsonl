{"task_id": "HumanEval/0", "completion": "    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    \"\"\" \n    This function takes a string containing multiple groups of nested parentheses. \n    The function separates these groups into separate strings and returns the list of these strings.\n    \"\"\"\n\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n\n    # Initialize an empty string to store the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the current level of parentheses\n    level = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, increase the level\n        if char == \"(\":\n            level += 1\n            # If the current group is empty, add the opening parenthesis to it\n            if not current_group:\n                current_group += char\n            # If the current group is not empty and the level is greater than the previous level, add a closing parenthesis to the current group\n            elif level > prev_level:\n                current_group += \")\"\n            # Update the previous level\n            prev_level = level\n        # If the character is a closing parenthesis, decrease the level\n        elif char == \")\":\n            level -= 1\n            # If the current group is not empty and the level is equal to the previous level, add a closing parenthesis to the current group\n            if current_group and level == prev_level:\n                current_group += \")\"\n            # Update the previous level\n            prev_level = level\n        # If the character is neither an opening nor a closing parenthesis, add it to the current group\n        else:\n            current_group += char\n\n        # If the current group is not empty and the level is zero, add the current group to the separated groups list and reset the current group\n        if current_group and level == 0:\n            separated_groups.append(current_group)\n            current_group = \"\"\n\n    # Return the list of separated groups\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
