{"task_id": "HumanEval/0", "completion": "    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n\n    # Initialize a stack to keep track of the current group\n    stack = []\n\n    # Initialize a variable to keep track of the current group\n    current_group = \"\"\n\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, push it to the stack and start a new group\n        if char == \"(\":\n            stack.append(char)\n            current_group = \"\"\n\n        # If the character is a closing parenthesis, pop the last opening parenthesis from the stack and append it to the current group\n        elif char == \")\":\n            if stack:\n                last_open = stack.pop()\n                current_group += last_open\n\n        # If the character is neither an opening nor a closing parenthesis, append it to the current group\n        else:\n            current_group += char\n\n        # If the current group is not empty and is not the first group, append it to the separated groups list\n        if current_group and current_group != separated_groups[0]:\n            separated_groups.append(current_group)\n\n    # Return the separated groups list\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
