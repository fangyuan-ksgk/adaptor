{"task_id": "HumanEval/0", "completion": "    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n    \n    # Initialize an empty string to store the current group\n    current_group = \"\"\n    \n    # Initialize a counter to keep track of the current level of nesting\n    nesting_level = 0\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        if char == '(':\n            # If the current character is an opening parenthesis,\n            # increase the nesting level by 1\n            nesting_level += 1\n            # If the current group is empty, add the opening parenthesis to it\n            if not current_group:\n                current_group += char\n            # Otherwise, add the opening parenthesis to the current group\n            else:\n                current_group += char\n        elif char == ')':\n            # If the current character is a closing parenthesis,\n            # decrease the nesting level by 1\n            nesting_level -= 1\n            # If the current group is not empty, add the closing parenthesis to it\n            if current_group:\n                current_group += char\n                # If the nesting level is back to 0, it means we have reached the end of a group\n                if nesting_level == 0:\n                    # Add the current group to the list of separated groups\n                    separated_groups.append(current_group)\n                    # Reset the current group to an empty string\n                    current_group = \"\"\n        else:\n            # If the current character is neither an opening nor a closing parenthesis,\n            # add it to the current group\n            current_group += char\n    \n    # After iterating over all the characters, add the last group to the list of separated groups\n    separated_groups.append(current_group)\n    \n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
