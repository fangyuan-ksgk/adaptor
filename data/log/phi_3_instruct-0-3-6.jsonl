{"task_id": "HumanEval/0", "completion": "    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/6", "completion": "    \"\"\"\n    This function takes a string of parentheses, separated by spaces.\n    It then calculates the maximum depth of nested parentheses for each group.\n    \"\"\"\n\n    def calculate_depth(group: str) -> int:\n        \"\"\"\n        This helper function calculates the depth of nested parentheses for a given group.\n        \"\"\"\n        depth = 0\n        max_depth = 0\n        in_paren = False\n\n        for char in group:\n            if char == '(':\n                in_paren = True\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                in_paren = False\n                depth -= 1\n\n        return max_depth\n\n    # Split the input string into groups separated by spaces\n    groups = paren_string.split()\n\n    # Calculate the depth for each group\n    depths = [calculate_depth(group) for group in groups]\n\n    return depths"}
