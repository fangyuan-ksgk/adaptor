{"task_id": "HumanEval/156", "completion": "    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define the mapping of numbers to roman numerals\n    roman_mapping = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n\n    # Initialize an empty string to store the result\n    result = ''\n\n    # Handle the special case where the number is 0\n    if number == 0:\n        return 'nulla'\n\n    # Handle the special case where the number is greater than 1000\n    if number > 1000:\n        return 'error'\n\n    # Handle the special case where the number is less than 1\n    if number < 1:\n        return 'error'\n\n    # Convert the number to a string and iterate over its characters\n    for digit in str(number):\n        # Convert the character to an integer\n        digit = int(digit)\n\n        # Check if the digit is in the mapping\n        if digit in roman_mapping:\n            # Append the corresponding roman numeral to the result\n            result += roman_mapping[digit]\n        else:\n            # If the digit is not in the mapping, return an error\n            return 'error'\n\n    # Return the final result\n    return result"}
{"task_id": "HumanEval/157", "completion": "    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # According to the Pythagorean theorem, for a right-angled triangle, the square of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the other two sides.\n    # So, we check if the square of the longest side (hypotenuse) is equal to the sum of the squares of the other two sides.\n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
