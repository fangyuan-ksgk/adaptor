{"task_id": "HumanEval/156", "completion": "    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define the roman numerals and their corresponding values\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    # Initialize an empty string to store the result\n    result = ''\n\n    # Handle the special case when the number is 0\n    if number == 0:\n        return 'nulla'\n\n    # Iterate over the roman_numerals dictionary\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        # While the number is greater than or equal to the current value\n        while number >= value:\n            # Append the corresponding numeral to the result string\n            result += numeral\n            # Subtract the value from the number\n            number -= value\n\n    # Return the result string in lowercase\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # Check if the sides form a right-angled triangle\n    # According to the Pythagorean theorem, in a right-angled triangle, the square of the hypotenuse (the side opposite the right angle) is equal to the sum of the squares of the other two sides.\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
