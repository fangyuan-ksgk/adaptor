{"task_id": "HumanEval/158", "completion": "    \"\"\"\n    This function accepts a list of strings. It returns the string with the maximum number of unique characters. If multiple strings have the same maximum number of unique characters, it returns the one which comes first in lexicographical order.\n    \"\"\"\n\n    max_unique_chars = 0\n    result = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n        elif unique_chars == max_unique_chars:\n            if word < result:\n                result = word\n\n    return result"}
{"task_id": "HumanEval/159", "completion": "    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \"\"\"\n\n    total_eaten = number + need\n    remaining_carrots = remaining - total_eaten\n\n    if remaining_carrots < 0:\n        total_eaten = total_eaten + remaining\n        remaining_carrots = 0\n    else:\n        remaining_carrots = remaining_carrots\n\n    return [total_eaten, remaining_carrots]"}
