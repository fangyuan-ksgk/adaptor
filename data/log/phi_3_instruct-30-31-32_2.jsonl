{"task_id": "HumanEval/30", "completion": "    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    Finds the zero of a polynomial.\n    \"\"\"\n    # Check if the number of coefficients is even\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n\n    # Check if the largest non-zero coefficient is positive\n    if xs[-1] <= 0:\n        raise ValueError(\"The largest non-zero coefficient must be positive.\")\n\n    # Define the polynomial function\n    def poly_func(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    # Use a numerical method to find the root of the polynomial\n    from scipy.optimize import newton\n    zero = newton(poly_func, 0)\n\n    return zero"}
