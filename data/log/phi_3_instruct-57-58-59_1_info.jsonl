{"task_id": "HumanEval/57", "completion": "    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    direction = None\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            if direction == None:\n                direction = 'increasing'\n            elif direction != 'increasing':\n                return False\n        elif l[i] > l[i + 1]:\n            if direction == None:\n                direction = 'decreasing'\n            elif direction != 'decreasing':\n                return False\n    return True", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "program": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    direction = None\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            if direction == None:\n                direction = 'increasing'\n            elif direction != 'increasing':\n                return False\n        elif l[i] > l[i + 1]:\n            if direction == None:\n                direction = 'decreasing'\n            elif direction != 'decreasing':\n                return False\n    return True\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n\ncheck(monotonic)", "success": true, "message": ""}
{"task_id": "HumanEval/58", "completion": "    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates and allow for faster lookup\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    common_elements = sorted(list(common_elements))\n\n    return common_elements", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "program": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    \"\"\"Return sorted unique common elements for two lists.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates and allow for faster lookup\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    common_elements = sorted(list(common_elements))\n\n    return common_elements\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n\ncheck(common)", "success": true, "message": ""}
{"task_id": "HumanEval/59", "completion": "    # Initialize the largest prime factor as 1\n    largest_prime = 1\n\n    # Divide n by 2 until it is odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n / 2\n\n    # Check for odd factors starting from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n / i\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "entry_point": "largest_prime_factor", "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "program": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the largest prime factor as 1\n    largest_prime = 1\n\n    # Divide n by 2 until it is odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n / 2\n\n    # Check for odd factors starting from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n / i\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\ncheck(largest_prime_factor)", "success": true, "message": ""}
