{"task_id": "HumanEval/57", "completion": "    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    direction = None\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            if direction is None:\n                direction = 'increasing'\n            elif direction != 'increasing':\n                return False\n        elif l[i] > l[i + 1]:\n            if direction is None:\n                direction = 'decreasing'\n            elif direction != 'decreasing':\n                return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert the lists to sets to remove duplicates and find the intersection\n    common_elements = list(set(l1) & set(l2))\n    # Sort the common elements\n    common_elements.sort()\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # Initialize the largest prime factor as 1\n    largest_prime = 1\n\n    # Divide n by 2 until it is odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n / 2\n\n    # Check for odd factors starting from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n / i\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime"}
