{"task_id": "HumanEval/6", "completion": "    \"\"\" \n    This function takes a string of parentheses and returns a list of integers representing the maximum depth of nested parentheses in each group.\n    \"\"\"\n    import re\n\n    # Regular expression to match groups of parentheses\n    pattern = r'\\([^()]*\\)'\n\n    # Find all matches in the input string\n    matches = re.findall(pattern, paren_string)\n\n    # Initialize an empty list to store the depths\n    depths = []\n\n    for match in matches:\n        # Initialize a variable to keep track of the current depth\n        depth = 0\n\n        # Iterate over each character in the current match\n        for char in match:\n            # If the character is an opening parenthesis, increment the depth\n            if char == '(':\n                depth += 1\n            # If the character is a closing parenthesis, decrement the depth\n            elif char == ')':\n                depth -= 1\n\n        # Append the final depth to the list\n        depths.append(depth)\n\n    return depths"}
{"task_id": "HumanEval/7", "completion": "    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return (total_sum, total_product)"}
