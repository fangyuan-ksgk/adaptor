{"task_id": "HumanEval/9", "completion": "    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    max_element = numbers[0]\n    rolling_max_list.append(max_element)\n\n    for num in numbers[1:]:\n        if num > max_element:\n            max_element = num\n            rolling_max_list.append(max_element)\n        else:\n            rolling_max_list.append(max_element)\n\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Find the longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        suffix = string[-i:]\n        if is_palindrome(suffix):\n            return string + suffix[::-1]\n    return string"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
