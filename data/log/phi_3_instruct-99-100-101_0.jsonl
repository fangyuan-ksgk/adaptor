{"task_id": "HumanEval/99", "completion": "    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert the string to a float\n    value = float(value)\n\n    # Round the float to the nearest integer\n    rounded_value = round(value)\n\n    # Check if the original value is exactly halfway between two integers\n    if abs(value - rounded_value) == 0.5:\n        # If the original value is negative, round it towards zero\n        if value < 0:\n            return -abs(rounded_value)\n        # If the original value is positive, round it away from zero\n        else:\n            return abs(rounded_value)\n    # If the original value is not exactly halfway between two integers, return the rounded value\n    else:\n        return rounded_value"}
{"task_id": "HumanEval/100", "completion": "    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    result = [n]\n    while len(result) < n:\n        if n % 2 == 0:\n            next_number = result[-1] + 2\n        else:\n            next_number = result[-1] + 2 if result[-1] % 2 == 0 else result[-1] + 1\n        result.append(next_number)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    # Split the string into words\n    words = s.replace(',', ' ').split()\n\n    return words"}
