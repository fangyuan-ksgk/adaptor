{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False<|end|><|assistant|> ```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n```<|end|>"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n\n    # Initialize a variable to keep track of the current group\n    current_group = ''\n\n    # Initialize a variable to keep track of the current level of nesting\n    nesting_level = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, increase the nesting level\n        if char == '(':\n            nesting_level += 1\n            # If the current group is empty, start a new group\n            if not current_group:\n                current_group = ''\n        # If the character is a closing parenthesis, decrease the nesting level\n        elif char == ')':\n            nesting_level -= 1\n            # If the current group is not empty and the nesting level is zero, add the current group to the list and reset the current group\n            if current_group and nesting_level == 0:\n                separated_groups.append(current_group)\n                current_group = ''\n        # If the character is neither an opening nor a closing parenthesis, add it to the current group\n        else:\n            current_group += char\n\n    # After iterating over all characters, if the current group is not empty, add it to the list\n    if current_group:\n        separated_groups.append(current_group)\n\n    return separated_groups\n\n```<|end|><|assistant|> ```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separates groups of balanced parentheses from a given string.\n    \n    :param paren_string: A string containing groups of balanced parentheses.\n    :return: A list of strings, each representing a group of balanced parentheses.\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)<|end|><|assistant|> ```python\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n```<|end|>"}
